data = read.csv("Survey.csv")
data = read.csv("Survey.csv")
# p1 Compute the correlation matrix in three ways
c1 = cor(data, method = "pearson")
corrplot(c1)
library(corrplot)
corrplot(c1)
c2 = cor(data, method = "spearman")
corrplot(c2)
c3 = cor(data, method = "kendall")
corrplot(c3)
# p2
KMO(data)
library(psych)
install.packages("psych")
library(psych)
# p2
KMO(data)
# p3  Use the Spearman correlation matrix to conduct a first PCA
pca.spearman = prcomp(c2)
summary(pca.spearman)
plot(pca.spearman)
screseplot(pca.spearman, main="Spearman Scree Plot", type="line" )
screeplot(pca.spearman, main="Spearman Scree Plot", type="line" )
screeplot(pca.spearman, main="Spearman Scree Plot", type="lines")
abline(1, 0, col="red")
screeplot(pca.spearman, main="Spearman Scree Plot", type="lines")
plot(pca.spearman)
abline(1, 0, col="red")
screeplot(pca.spearman, main="Spearman Scree Plot", type="lines", abline(1, 0, col="red"))
abline(v=15, col="blue")
abline(h=1, col="blue")
screeplot(pca.spearman, main="Spearman Scree Plot", type="lines")
abline(h=1, col="blue")
abline(h=1, col="red", lty= 1)
screeplot(pca.spearman, main="Spearman Scree Plot", type="lines")
plot(pca.spearman)
abline(h=1, col="red", lty= 1)
summary(pca.spearman)
pca.spearman = prcomp(c2)
summary(pca.spearman)
# p4
pfa.spearman = principal(c2, nfactors = 3, rot = "none")
pfa.spearman
# p5
print(pfa.spearman$loadings, cutoff = 0.4)
# p5
print(pfa.spearman$loadings, cutoff = 0.4)
pfa.spearman = principal(c2, nfactors = 3, rot = "none")
pfa.spearman
# p5
print(pfa.spearman$loadings, cutoff = 0.4)
# p6 Evaluate the goodness of fit with the Chi-square and the RMSEA
print(fit)
# p6 Evaluate the goodness of fit with the Chi-square and the RMSEA
print(pfa.spearman)
# p7
library(polycor)
install.packages("polycor")
# p7 Repeat the analysis with the polychoric correlation
## Polychoric correlation
poly_cor = polychoric(data)
# p7 Repeat the analysis with the polychoric correlation
## Polychoric correlation
poly_cor = polychoric(data[1:11])
data = read.csv("StoresAndAges.csv")
# p1 Create a mosaic plot of the two categorical variables.
library(vcd)
install.packages("vcd")
# p1 Create a mosaic plot of the two categorical variables.
library(vcd)
mosaic(data, shade=TRUE, legend=TRUE)
# p1 Create a mosaic plot of the two categorical variables.
store = data[,-1]
View(store)
View(data)
View(store)
rownames(store) = data[,1]
View(store)
mosaicplot(store, shade = T, main = "")
library(carData)
# A dataset of migraine treatment data
head(KosteckiDillon)
summary(KosteckiDillon)
conTab = table(KosteckiDillon$hatype, KosteckiDillon$medication)
library(vcd)
mosaic(conTab, shade=TRUE, legend=TRUE)
library(ca)
fit = ca(conTab)
fit
plot(fit)
summary(KosteckiDillon)
fit = ca(conTab)
library(ca)
install.packages("ca")
library(ca)
fit = ca(conTab)
fit
# p1 Create a mosaic plot of the two categorical variables.
head(data)
data = read.csv("StoresAndAges.csv")
View(data)
# A dataset of migraine treatment data
head(KosteckiDillon)
data = read.csv("StoresAndAges.csv")
# p1 Create a mosaic plot of the two categorical variables.
head(data)
# A dataset of migraine treatment data
head(KosteckiDillon)
# p1 Create a mosaic plot of the two categorical variables.
store = data[,-1]
rownames(store) = data[,1]
View(store)
mosaicplot(store, shade = T, main = "")
fit = ca(store)
fit
plot(fit)
# p5
c = ca(store)
summary(c)
data = read.table("BondRating.xls")
data = read_excel("BondRating.xls")
library("readxl")
install.packages("readxl")
library("readxl")
data = read_excel("BondRating.xls")
View(data)
# a
plot(data, col=data$CODERTG)
# a
plot(data, pch = 16, col=data$CODERTG)
ds = read_excel("BondRating.xls")
# a
plot(ds, pch = 16, col=ds$CODERTG)
s = sample(nrow(ds), nrow(ds) * .8)
dsTrain = ds[s, ]
dsTest = ds[-s, ]
Bond.lda = lda(CODERTG ~ ., data=dsTrain)
install.packages("rattle")
library(MASS)
Bond.lda = lda(CODERTG ~ ., data=dsTrain)
ds = read_excel("BondRating.xls", header = T)
install.packages("gdata")
ds = read.xls("BondRating.xls", header = T)
library(gdata)
ds = read.xls("BondRating.xls", header = T)
View(ds)
# a
plot(ds, pch = 16, col=ds$CODERTG)
s = sample(nrow(ds), nrow(ds) * .8)
dsTrain = ds[s, ]
dsTest = ds[-s, ]
Bond.lda = lda(CODERTG ~ ., data=dsTrain)
ds = read.xls("BondRating.xls")
View(ds)
ds = read.xls("BondRating.xls", sheet=1, verbose=FALSE)
View(ds)
ds <- read.xls("BondRating.xls", sheet=1, verbose=FALSE)
View(ds)
colnames(ds) <- c(new_col1_name,new_col2_name,new_col3_name)
ds = ds[-1,]
View(ds)
ds <- read.xls("BondRating.xls", sheet=1, verbose=FALSE)
colnames(ds) = ds[1,]
View(ds)
ds = ds[-1,]
View(ds)
ds <- read.xls("BondRating.xls", sheet=1, verbose=FALSE)
View(ds)
colnames(ds) = ds[1,]
ds = ds[-1,]
# a
plot(ds, pch = 16, col=ds$CODERTG)
s = sample(nrow(ds), nrow(ds) * .8)
dsTrain = ds[s, ]
dsTest = ds[-s, ]
Bond.lda = lda(CODERTG ~ ., data=dsTrain)
Bond.lda = lda(CODERTG ~ ., data=ds)
print(Bond.lda)
View(ds)
trainingData <- read.xls("BondRating.xls", sheet=1)
validationData <- read.xls("BondRating.xls", sheet=2)
View(validationData)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
View(trainingData)
validationData(ds) = validationData[1,]
validationData <- read.xls("BondRating.xls", sheet=2)
colnames(ds) = validationData[1,]
validationData = validationData[-1,]
View(validationData)
validationData <- read.xls("BondRating.xls", sheet=2)
View(validationData)
colnames(ds) = validationData[1,]
View(validationData)
trainingData <- read.xls("BondRating.xls", sheet=1)
trainingData <- read.xls("BondRating.xls", sheet=1)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
validationData <- read.xls("BondRating.xls", sheet=2)
colnames(validationData) = validationData[1,]
validationData = validationData[-1,]
View(trainingData)
View(validationData)
# a
plot(ds, pch = 16, col=ds$CODERTG)
Bond.lda = lda(CODERTG ~ ., data=ds)
Bond.lda = lda(CODERTG ~ ., data=trainingData)
# a
plot(ds, pch = 16, col=ds$CODERTG)
Bond.lda = lda(CODERTG ~ ., data=trainingData)
print(Bond.lda)
fit = lda(CODERTG ~ ., data = trainingData)
trainingData = trainingData[,-(1:2)]
View(trainingData)
validationData = validationData[,-(1:2)]
# a
plot(ds, pch = 16, col=ds$CODERTG)
View(trainingData)
fit = lda(CODERTG ~ ., data = trainingData)
# a
plot(ds, pch = 16, col=ds$CODERTG)
fit = lda(CODERTG ~ ., data = trainingData)
View(ds)
View(trainingData)
trainingData <- read.xls("BondRating.xls", sheet=1)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
trainingData = trainingData[,-(1:2)]
validationData <- read.xls("BondRating.xls", sheet=2)
colnames(validationData) = validationData[1,]
validationData = validationData[-1,]
validationData = validationData[,-(1:2)]
# a
plot(ds, pch = 16, col=ds$CODERTG)
fit = lda(CODERTG ~ ., data = trainingData)
# a
plot(ds, pch = 16, col=ds$CODERTG)
fit = lda(CODERTG ~ ., data = trainingData)
fit = lda(CODERTG ~ ., data = trainingData)
library(MASS)
library(gdata)
# a
plot(ds, pch = 16, col=ds$CODERTG)
fit = lda(CODERTG ~ ., data = trainingData)
fit = fda(CODERTG ~ ., data = trainingData)
install.packages("fda")
library(fda)
fit = fda(CODERTG ~ ., data = trainingData)
Error in fda(CODERTG ~ ., data = trainingData) :
could not find function "fda
model = glm(CODERTG ~ .,
family=binomial(link='logit'),
data=trainingData)
model = glm(CODERTG ~ ., data = trainingData, family = binomial, na.action = na.exclude)
View(trainingData)
model = glm(CODERTG ~ ., data = trainingData, family = binomial, na.action = na.exclude)
trainingData <- read.xls("BondRating.xls", sheet=1, stringsAsFactors=T)
trainingData <- read.xls("BondRating.xls", sheet=1, stringsAsFactors=T)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
trainingData = trainingData[,-(1:2)]
validationData <- read.xls("BondRating.xls", sheet=2, stringsAsFactors=T)
colnames(validationData) = validationData[1,]
validationData = validationData[-1,]
validationData = validationData[,-(1:2)]
model = glm(CODERTG ~ ., data = trainingData, family = binomial, na.action = na.exclude)
trainingData <- read.xls("BondRating.xls", sheet=1)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
trainingData = trainingData[,-(1:2)]
validationData <- read.xls("BondRating.xls", sheet=2)
colnames(validationData) = validationData[1,]
validationData = validationData[-1,]
validationData = validationData[,-(1:2)]
View(trainingData)
model = glm(CODERTG ~ ., data = trainingData, family = binomial, na.action = na.exclude)
trainingData <- read.xls("BondRating.xls", sheet=1, stringsAsFactors=T)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
trainingData = trainingData[,-(1:2)]
validationData <- read.xls("BondRating.xls", sheet=2, stringsAsFactors=T)
colnames(validationData) = validationData[1,]
validationData = validationData[-1,]
validationData = validationData[,-(1:2)]
model = glm(CODERTG ~ ., data = trainingData, family = binomial, na.action = na.exclude)
model = glm(8 ~ ., data = trainingData, family = binomial, na.action = na.exclude)
trainingData <- read.xls("BondRating.xls", sheet=1)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
trainingData = trainingData[,-(1:2)]
validationData <- read.xls("BondRating.xls", sheet=2,)
colnames(validationData) = validationData[1,]
validationData = validationData[-1,]
validationData = validationData[,-(1:2)]
trainingData$CODERTG
# fit = fda(CODERTG ~ ., data = trainingData)
# Error in fda(CODERTG ~ ., data = trainingData) :
# could not find function "fda
fit = fit(CODERTG ~ .)
# fit = fda(CODERTG ~ ., data = trainingData)
# Error in fda(CODERTG ~ ., data = trainingData) :
# could not find function "fda
fit = lm(CODERTG ~ .)
# fit = fda(CODERTG ~ ., data = trainingData)
# Error in fda(CODERTG ~ ., data = trainingData) :
# could not find function "fda
fit = lm(CODERTG ~ ., data = trainingData)
summary(fit)
print(fit)
data = read.csv("Survey.csv")
View(data)
data$Qu1
trainingData$LOPMAR
trainingData <- read.xls("BondRating.xls", sheet=1)
as.numeric(trainingData)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
trainingData = trainingData[,-(1:2)]
trainingData$LOPMAR
trainingData <- read.xls("BondRating.xls", sheet=1)
as.numeric(trainingData$CODERTG)
colnames(trainingData) = trainingData[1,]
trainingData = trainingData[-1,]
trainingData = trainingData[,-(1:2)]
trainingData$CODERTG
as.numeric(trainingData$CODERTG)
trainingData = as.numeric(trainingData)
i <- c(2, 3)
trainingData[ , i] <- apply(trainingData[ , i], 2, function(x) as.numeric(as.character(x)))
trainingData$CODERTG
trainingData$LOPMAR
i <- c(1, 3)
trainingData[ , i] <- apply(trainingData[ , i], 2, function(x) as.numeric(as.character(x)))
trainingData$LOPMAR
trainingData$CODERTG
View(dsTrain)
View(trainingData)
i <- c(1, 11)
i <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
trainingData[ , i] <- apply(trainingData[ , i], 2, function(x) as.numeric(as.character(x)))
model = glm(CODERTG ~ ., data = trainingData, family = binomial, na.action = na.exclude)
# fit = fda(CODERTG ~ ., data = trainingData)
# Error in fda(CODERTG ~ ., data = trainingData) :
# could not find function "fda
fit = lm(CODERTG ~ ., data = trainingData)
print(fit)
model = glm(CODERTG ~ ., data = trainingData, family = binomial, na.action = na.exclude)
fit = fda(CODERTG ~ ., data = trainingData)
fit = lda(CODERTG ~ ., data = trainingData)
View(validationData)
validationData[ , i] <- apply(validationData[ , i], 2, function(x) as.numeric(as.character(x)))
i <- c(1: 11)
trainingData[ , i] <- apply(trainingData[ , i], 2, function(x) as.numeric(as.character(x)))
fit = lda(CODERTG ~ ., data = trainingData)
# a
plot(ds, pch = 16, col=ds$CODERTG)
trainingData.lda = lda(CODERTG ~ ., data = trainingData)
print(trainingData.lda)
print(trainingData.lda$scaling[order(trainingData.lda$scaling[, 1]), ])
print(trainingData.lda$scaling[order(trainingData.lda$scaling[, 2]), ])
par(mar=c(2,2,2,2))
trainingData.lda.predict = predict(trainingData.lda, newdata = trainingData)
ldahist(data = trainingData.lda.predict$x[,1], g = trainingData$CODERTG)
ldahist(data = trainingData.lda.predict$x[,2], g = trainingData$CODERTG)
plot(trainingData.lda.predict$x[, 1], trainingData.lda.predict$x[, 2], col=trainingData$CODERTG, pch=16)
ldahist(data = trainingData.lda.predict$x[,1], g = trainingData$CODERTG)
plot(trainingData.lda.predict$x[, 1], trainingData.lda.predict$x[, 2], col=trainingData$CODERTG, pch=16)
ldahist(data = trainingData.lda.predict$x[,2], g = trainingData$CODERTG)
plot(trainingData.lda.predict$x[, 3], trainingData.lda.predict$x[, 4], col=trainingData$CODERTG, pch=16)
# predict with test data
validationData.lda.predict = predict(trainingData.lda, newdata = validationData)
ldahist(data = validationData.lda.predict$x[,1], g = validationData$CODERTG)
table(validationData$CODERTG, validationData.lda.predict$class)
