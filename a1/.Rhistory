data = read.csv("olympics.csv")
head(data)
head(data)
attach(data)
plot(data. pch = 16)
plot(data, pch = 16)
pairs.panels(file)
library(psych)
pairs.panels(file)
pairs.panels(data)
str(data)
# Check correlations for a data matrix
pairs.panels(data - data$ISO.country.code - data$Country.name)
# Check correlations for a data matrix
pairs.panels(data - data$ISO.country.code - data$Country.name)
str(data[1:])
str(data[,c(1:3)])
# Check correlations for a data matrix
pairs.panels(data[,c(3:)])
# Check correlations for a data matrix
pairs.panels(data[,-c(1,2)])
# Check correlations for a data matrix
pairs.panels(data[,-c(1,2)]) # country code and name is not necessary
londonOlympic <- read.csv2("/Users/Yiyang/Documents/CSC 424/Homework-1-DataFiles/olympics.csv", sep = ",", header = T)
print(londonOlympic)
londonOlympic$ratio <- (londonOlympic$Female.count + londonOlympic$Male.count)/londonOlympic$X2010.population
print(londonOlympic)
londonOlympic <- read.csv2("olympics.csv", sep = ",", header = T)
print(londonOlympic)
londonOlympic$ratio <- (londonOlympic$Female.count + londonOlympic$Male.count)/londonOlympic$X2010.population
print(londonOlympic)
data$GDP.per.capita <- (data$X2011.GDP/data$X2010.population)
print(data)
pairs.panels(data[,-c(1,2)]) # country code and name is not necessary
data$Total.medals <- (data$Gold.medals+data$Silver.medals+data$Bronze.medals)
print(data)
# Check correlations for a data matrix
pairs.panels(data[,-c(1,2)]) # country code and name is not necessary
data$GDP.per.participants <- (data$X2011.GDP/(data$Male.count+data$Female.count))
print(data)
# Check correlations for a data matrix
pairs.panels(data[,-c(1,2)]) # country code and name is not necessary
View(data)
library(psych)
data = read.csv("olympics.csv")
str(data)
data$GDP.per.capita <- (data$X2011.GDP/data$X2010.population)
data$Total.medals <- (data$Gold.medals+data$Silver.medals+data$Bronze.medals)
# Check correlations for a data matrix
pairs.panels(data[,-c(1,2)]) # country code and name is not necessary
View(data)
attach(data)
fit = lm(Total.medals ~ Female.count + Male.count + X2011.GDP)
summary(fit)
plot(fit)
plot(fit)
vif(fit)
library(car)
install(car)
library(corrplot)
cor.hbat = cor(file)
corrplot(cor.hbat)
cor.hbat = cor(data)
library(car)
vif(fit)
data$GDP.per.participants <- (data$X2011.GDP/(data$Male.count+data$Female.count))
# Check correlations for a data matrix
pairs.panels(data[,-c(1,2)]) # country code and name is not necessary
plot(f)
plot(fit)
View(data)
data$Total.participants <-(data$Male.count+data$Female.count)
pairs.panels(data[,-c(1,2)])
fit = lm(Total.medals ~ Total.participants + X2011.GDP)
attach(data)
fit = lm(Total.medals ~ Total.participants + X2011.GDP)
summary(fit)
vif(fit)
fit2 = lm(Total.medals ~ Total.participants + X2011.GDP)
plot(fit2)
plot(fit2)
finalModel = data[-c(2, 9), -c(1,2)]
View(finalModel)
attach(finalModel)
fit3 = lm(Total.medals ~ Total.participants + X2011.GDP)
summary(fit3)
plot(fit3)
vif(fit3)
housingData = read.csv("housing.csv")
attach(housingData)
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
# correlation scatterplot matrix
library(psych)
pairs.panels(housingData)
# correlation scatterplot with a corrplot
library(corrplot)
cor.hbat = cor(housingData)
corrplot(cor.hbat)
#data transformation (DIS, NOX and LSTAT.)
logDis = log(housingData$DIS)
housingData$DIS = logDis
# logNOX has negative impact on R^2
#logNOX = log(housingData$NOX)
#housingData$NOX = logNOX
logLSTAT = log(housingData$LSTAT)
housingData$LSTAT = logLSTAT
attach(housingData)
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
# stepwise selection
null = lm(MEDV ~ 1, data=housingData)
full = lm(MEDV ~ ., data=housingData)
# forward
housingForward = step(null, scope = list(lower=null, upper=full), direction="forward", trace=F)
summary(housingForward)
sort(lm.beta(housingForward))
install.packages("corrplot")
install.packages("QuantPsyc")
install.packages("car")
install.packages("leaps")
install.packages("lm.beta")
library(psych)     # Has a much better scatterplot matrix function
library(corrplot)  # A nice correlation matrix visualization
library(car)       # Misc statistical methods
library(QuantPsyc) # Misc statistical methods
library(leaps)     # Gives forward, backward and stepwise
library(lm.beta)   # Gives us standardized coefficients
install.packages("corrplot")
install.packages("corrplot")
housingData = read.csv("housing.csv")
attach(housingData)
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
# correlation scatterplot matrix
library(psych)
pairs.panels(housingData)
# correlation scatterplot with a corrplot
library(corrplot)
cor.hbat = cor(housingData)
corrplot(cor.hbat)
#data transformation (DIS, NOX and LSTAT.)
logDis = log(housingData$DIS)
housingData$DIS = logDis
# logNOX has negative impact on R^2
#logNOX = log(housingData$NOX)
#housingData$NOX = logNOX
logLSTAT = log(housingData$LSTAT)
housingData$LSTAT = logLSTAT
attach(housingData)
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
# stepwise selection
null = lm(MEDV ~ 1, data=housingData)
full = lm(MEDV ~ ., data=housingData)
# forward
housingForward = step(null, scope = list(lower=null, upper=full), direction="forward", trace=F)
summary(housingForward)
sort(lm.beta(housingForward))
lm.beta(housingForward)
summary(housingForward)
summary(housingBackward)
housingData = read.csv("housing.csv")
null = lm(MEDV ~ 1, data=housingData)
full = lm(MEDV ~ ., data=housingData)
# forward
housingForward = step(null, scope = list(lower=null, upper=full), direction="forward", trace=F)
summary(housingForward)
housingSubsets = regsubsets(MEDV ~ ., data=housingData, nvmax=13, nbest=1)
plot(housingSubsets, scale="adjr2")
housingData = read.csv("housing.csv")
attach(housingData)
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
# correlation scatterplot matrix
library(psych)
pairs.panels(housingData)
# correlation scatterplot with a corrplot
library(corrplot)
cor.hbat = cor(housingData)
corrplot(cor.hbat)
#data transformation (DIS, NOX and LSTAT.)
logDis = log(housingData$DIS)
housingData$DIS = logDis
# logNOX has negative impact on R^2
#logNOX = log(housingData$NOX)
#housingData$NOX = logNOX
logLSTAT = log(housingData$LSTAT)
housingData$LSTAT = logLSTAT
attach(housingData)
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
# stepwise selection
null = lm(MEDV ~ 1, data=housingData)
full = lm(MEDV ~ ., data=housingData)
# forward
housingForward = step(null, scope = list(lower=null, upper=full), direction="forward", trace=F)
summary(housingForward)
lm.beta(housingForward)
#backward
housingBackward = step(full, scope=list(lower=null, upper=full), direction="backward", trace=F)
summary(housingBackward)
#both
housingStep = step(null, scope=list(lower=null, upper=full), direction="both", trace=F)
summary(housingStep)
library(leaps)
housingSubsets = regsubsets(MEDV ~ ., data=housingData, nvmax=13, nbest=1)
reg.summary = summary(housingSubsets)
plot(reg.summary$rsq, xlab="Number of Variables", ylab="RSquare", type="l")
plot(reg.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(housingSubsets, scale="adjr2")
reg.summary = summary(housingSubsets)
reg.summary
bestR2Fit = lm(MEDV ~ .-INDUS-AGE, data=hbat)
bestR2Fit = lm(MEDV ~ .-INDUS-AGE, data=housingData)
summary(bestR2Fit)
bestR2Fit = lm(MEDV ~ .-INDUS-AGE-ZN, data=housingData)
summary(bestR2Fit)
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
bestR2Fit = lm(MEDV ~ .-INDUS-AGE-ZN, data=housingData)
summary(bestR2Fit)
finalModel = lm(MEDV ~ .-INDUS-AGE-ZN-CHAS-RAD-TAX, data=housingData)
summary(finalModel)
library(lm.beta)
stdCoef = coef(lm.beta(housingForward))
barplot(sort(stdCoef))
barplot(rev(sort(stdCoef)))
stdCoef = coef(lm.beta(housingForward))
print(stdCoef)
finalModel = lm(MEDV ~ .-INDUS-AGE-ZN-CHAS, data=housingData)
summary(finalModel)
