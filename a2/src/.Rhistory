p5 = p3 %*% p4
p5
p5*116
p6 = det(p2)
p6
library(MASS)
library(matlib)
# matrix prepare
Z = matrix(c(1,1,1,1,2,-3,4,-1), nrow=4, ncol=2, byrow=F)
Y = matrix(c(0,1,4,-3), nrow=4, ncol=1, byrow=F)
# Z transpose
p1 = t(Z)
p1
# (Transpose of Z) * Z
p2 = p1 %*% Z
p2
# inverse of ((Transpose of Z) * Z)
p3 = solve(p2)
p3
# (Transpose of Z) * Y
p4 = p1 %*% Y
p4
# c * d
p5 = p3 %*% p4
p5
# determinant of (Transpose of Z) * Z
p6 = det(p2)
p6
p1 p2 p3
p1
p2
p3
p4
p5
p6
fit = lm(Y ~ Z)
summary(fit)
fit = lm(Z ~ Y)
summary(fit)
fit = lm(Y ~ Z)
summary(fit)
head(mtcars)
mtcars[mpg]
mtcars[mtcars$mpg]
# Create a copy of the dataset called A with only the columns {cyl, disp, hp, wt, carb}
A = mtcars[,1]
A
# Create a copy of the dataset called A with only the columns {cyl, disp, hp, wt, carb}
A = mtcars[,[1,2]]
# Create a copy of the dataset called A with only the columns {cyl, disp, hp, wt, carb}
A = mtcars[,(1,2)]
# Create a copy of the dataset called A with only the columns {cyl, disp, hp, wt, carb}
A = mtcars[,c("cyl")]
A
# Create a copy of the dataset called A with only the columns {cyl, disp, hp, wt, carb}
A = mtcars[,c("cyl", "disp", "hp", "wt", "carb")]
A
#
# Add a column of “ones” to A called “count”
cbind(const=1, A[, c("count")])
A
View(A)
m <- cbind(1, 1:7)
m
m <- cbind(A, count = 1)
m
# Add a column of “ones” to A called “count”
A <- cbind(A, count = 1)
A
# Add a column of “ones” to A called “count”, convert it to a matrix and assign it back to the variable A
A <- as.matrix(cbind(A, count = 1))
A
View(A)
View(A)
# Create a copy of the dataset called A with only the columns {cyl, disp, hp, wt, carb}
A = mtcars[,c("cyl", "disp", "hp", "wt", "carb")]
# Add a column of “ones” to A called “count”, convert it to a matrix and assign it back to the variable A
A <- as.matrix(cbind(A, count = 1))
A
# computing the matrix operations
Y = as.matrix(mtcars[,c("mpg")])
Y
fit = lm(Y ~ A)
summary(fit)
Y = as.matrix(mtcars[,c("mpg")])
beta = solve(t(A) %*% A) %*% (t(A) %*% Y)
beat
beta
summary(fit)
library(MASS)
library(matlib)
# Create a copy of the dataset called A with only the columns {cyl, disp, hp, wt, carb}
A = mtcars[,c("cyl", "disp", "hp", "wt", "carb")]
# Add a column of “ones” to A called “count”, convert it to a matrix and assign it back to the variable A
A <- as.matrix(cbind(A, count = 1))
# computing the matrix operations
Y = as.matrix(mtcars[,c("mpg")])
beta = solve(t(A) %*% A) %*% (t(A) %*% Y)
beta
# linear model result
fit = lm(Y ~ A)
summary(fit)
housingData = read.csv("housingTrain")
housingData = read.csv("housingTrain.csv")
View(housingData)
View(housingData)
str(housingData)
# linear regression model of MEDV
fit = lm(MEDV ~ ., data=housingData)
summary(fit)
housingTrainDataRMSE = sqrt(mean(fit$residuals))
housingTrainDataRMSE
housingTrainDataRMSE = sqrt(mean(fit$residuals^2))
housingTrainDataRMSE
housingTestData = read.csv("housingTest.csv")
# Predict on the test set and compute error
housingPred = predict(fit, housingTestData)
housingTestDataRMSE = sqrt(mean((housingPred - housingTestData$MEDV)^2)
housingTestDataRMSE = sqrt(mean((housingPred - housingTestData$MEDV)^2))
housingTestDataRMSE = sqrt(mean((housingPred - housingTestData$MEDV)^2))
housingTestDataRMSE
housingTrainDataRMSE
housingTestDataRMSE
(housingTestDataRMSE - housingTrainDataRMSE)/housingTrainDataRMSE
(housingTestDataRMSE - housingTrainDataRMSE)/housingTrainDataRMSE
(housingTestDataRMSE - housingTrainDataRMSE)/housingTrainDataRMSE
(housingTestDataRMSE - housingTrainDataRMSE)/housingTrainDataRMSE
percentDiff = (housingTestDataRMSE - housingTrainDataRMSE)/housingTrainDataRMSE
percentDiff
percentDiff
percentDiff = (housingTestDataRMSE - housingTrainDataRMSE)/housingTrainDataRMSE
percentDiff
library(glmnet)
# prepare
housingTrainMEDV = as.Matrix(housingTrainData[, c("MEDV")])
# prepare
housingTrainMEDV = as.matrix(housingTrainData[, c("MEDV")])
housingTrainData = read.csv("housingTrain.csv")
# prepare
housingTrainMEDV = as.matrix(housingTrainData[, c("MEDV")])
housingTrainMEDV
housingTrainOther = as.matrix(housingTrainData[, -c("MEDV")])
# prepare
housingTrainMEDV = as.matrix(housingTrainData[, c("MEDV")])
housingTrainOther = as.matrix(housingTrainData[, -c("MEDV")])
housingTrainOther = as.matrix(housingTrainData[, -c("MEDV")])
housingTrainOther = as.matrix(housingTrainData[, .-c("MEDV")])
housingTrainOther = as.matrix(housingTrainData[, -c("MEDV")])
test = housingTrainData[, -c("MEDV")]
test = housingTrainData[, !c("MEDV")]
test = housingTrainData[, !"MEDV"]
STR(housingTrainData)
str(housingTrainData)
test = housingTrainData[,-1]
test
str(test)
str(housingTrainData)
test = housingTrainData[,-2]
str(test)
test = housingTrainData[,-c(1:3)]
str(test)
test = housingTrainData[,-c("CHAS")]
housingTrainOther = as.matrix(housingTrainData[, -12])
test = housingTrainData[,-]
str(housingTrainOther)
View(housingTrainOther)
View(housingTrainMEDV)
# prepare
housingTrainMEDV = as.matrix(housingTrainData[, 12])
View(housingTrainMEDV)
View(housingTrainData)
housingTrainOther = as.matrix(housingTrainData[, -13])
View(housingTrainOther)
# prepare
housingTrainMEDV = as.matrix(housingTrainData[, 13])
View(housingTrainOther)
View(housingTrainMEDV)
View(housingTrainMEDV)
View(housingTrainData)
housingTrainMEDV = as.matrix(housingTrainData[, 13])
housingTrainOther = as.matrix(housingTrainData[, -13])
housingTestMEDV = as.matrix(housingTestData[, 13])
housingTestOther = as.matrix(housingTestData[, -13])
lRange = seq(0, 3, .1)
fitRidge2 = glmnet(housingTrainOther, housingTrainMEDV, alpha=0, lambda=lRange)
plot(fitRidge2, xvar="lambda")
summary(fitRidge2)
fitRidge2
fitRidge2
summary(fitRidge2)
housingTrainRidgeFit = glmnet(housingTrainOther, housingTrainMEDV, alpha=0, lambda=seq(0, 3, .1))
plot(housingTrainRidgeFit, xvar="lambda")
summary(housingTrainRidgeFit)
housingTrainRidgeFit2 = cv.glmnet(housingTrainOther, housingTrainMEDV, alpha=0, nfolds=7)
plot(housingTrainRidgeFit2)
housingTrainRidgeFit
housingTrainRidgeFit2 = cv.glmnet(housingTrainOther, housingTrainMEDV, alpha=0, nfolds=7)
plot(housingTrainRidgeFit2)
ridgePred = predict(housingTrainRidgeFit2, xTest, s="lambda.1se")
rmseRidge = sqrt(mean((ridgePred - housingTestMEDV)^2))
rmseRidge
housingTrainRidgeFit2 = cv.glmnet(housingTrainOther, housingTrainMEDV, alpha=0, nfolds=7)
plot(housingTrainRidgeFit2)
ridgePred = predict(housingTrainRidgeFit2, xTest, s="lambda.1se")
ridgePred = predict(housingTrainRidgeFit2, housingTestOther, s="lambda.1se")
rmseRidge = sqrt(mean((ridgePred - housingTestMEDV)^2))
rmseRidge
housingTrainRidgeFit2$lambda.min
housingTrainRidgeFit2$lambda.1se
ridgePred = predict(housingTrainRidgeFit2, housingTestOther, s="lambda.min")
rmseRidge = sqrt(mean((ridgePred - housingTestMEDV)^2))
rmseRidge
summary(housingTrainRidgeFit)
plot(housingTrainRidgeFit, xvar="lambda")
housingTrainRidgeFit3 = glmnet(xTrain, yTrain, alpha=0, lambda=1.6)
housingTrainRidgeFit3
housingTrainRidgeFit3 = glmnet(housingTrainOther, housingTrainMEDV, alpha=0, lambda=1.6)
housingTrainRidgeFit3
rmseRidge
ridgePred = predict(housingTrainRidgeFit2, housingTestOther, s="lambda.1se")
rmseRidge = sqrt(mean((ridgePred - housingTestMEDV)^2))
rmseRidge
housingTrainRidgeFit
plot(housingTrainRidgeFit, xvar="lambda")
rmseRidge
housingTrainLassoFit = glmnet(housingTrainOther, housingTrainMEDV, alpha=1, lambda=seq(0, 1, .1))
housingTrainLassoFit
plot(housingTrainLassoFit, xvar="lambda")
housingTrainLassoFit2 = cv.glmnet(xTrain, yTrain, alpha=1, nfolds=7)
plot(housingTrainLassoFit2)
lassoPred = predict(housingTrainLassoFit, housingTestOther, s="lambda.1se")
rmseLasso = sqrt(mean((lassoPred - housingTestMEDV)^2))
rmseLasso
housingTrainLassoFit = glmnet(housingTrainOther, housingTrainMEDV, alpha=1, lambda=seq(0, 1, .1))
housingTrainLassoFit
plot(housingTrainLassoFit, xvar="lambda")
housingTrainLassoFit2 = cv.glmnet(housingTrainOther, housingTrainMEDV, alpha=1, nfolds=7)
plot(housingTrainLassoFit2)
lassoPred = predict(housingTrainLassoFit, housingTestOther, s="lambda.1se")
rmseLasso = sqrt(mean((lassoPred - housingTestMEDV)^2))
rmseLasso
lassoPred = predict(housingTrainLassoFit, housingTestOther, s="lambda.1se")
plot(housingTrainLassoFit2)
lassoPred = predict(housingTrainLassoFit, housingTestOther, s="lambda.1se")
housingTrainLassoFit2 = cv.glmnet(housingTrainOther, housingTrainMEDV)
coef(housingTrainLassoFit2, s="lambda.min")
lassoPred = predict(housingTrainLassoFit2, newx=housingTestOther, s="lambda.1se")
rmseLasso = sqrt(mean((lassoPred - housingTestMEDV)^2))
rmseLasso
housingTrainLassoFit2 = cv.glmnet(housingTrainOther, housingTrainMEDV)
coef(housingTrainLassoFit2, s="lambda.1se")
lassoPred = predict(housingTrainLassoFit2, newx=housingTestOther, s="lambda.1se")
rmseLasso = sqrt(mean((lassoPred - housingTestMEDV)^2))
rmseLasso
percentDiff2 = (housingTestDataRMSE - rmseRidge)/rmseRidge
percentDiff2
percentDiff3 = (housingTestDataRMSE - rmseLasso)/rmseLasso
percentDiff3
housingTrainLassoFit2
coef(housingTrainLassoFit2, s="lambda.1se")
plot(housingTrainLassoFit2)
lassoPred
rmseLasso
coef(housingTrainLassoFit2, s="lambda.1se")
insurTrainData = read.csv("insurTrain.csv")
str(insurTrainData)
data = insurTestData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
insurTrainData = read.csv("insurTrain.csv")
insurTestData = read.csv("insurTest.csv")
data = insurTrainData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
data
fit = lm(newpol ~ ., data=newData)
summary(fit)
# linear regression model of MEDV
fit = lm(newpol ~ ., data=newData)
newData = insurTrainData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
# linear regression model of MEDV
fit = lm(newpol ~ ., data=newData)
summary(fit)
insurTrainDataRMSE = sqrt(mean(fit$residuals^2))
insurTrainDataRMSE
newTrainData = insurTrainData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
newTestData = insurTestData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
# linear regression model of MEDV
fit = lm(newpol ~ ., data=newTrainData)
summary(fit)
# Find the RMSE
insurTrainDataRMSE = sqrt(mean(fit$residuals^2))
insurTrainDataRMSE
# Predict on the test set and compute error
insurPred = predict(fit, insurTestData)
insurTestDataRMSE = sqrt(mean((housingPred - housingTestData$MEDV)^2))
housingTestDataRMSE
insurTestDataRMSE = sqrt(mean((insurPred - newTestData$newpol)^2))
insurTestDataRMSE
insurTrainDataRMSE
# Predict on the test set and compute error
insurPred = predict(fit, insurTestData)
insurTrainDataRMSE
# Predict on the test set and compute error
insurPred = predict(fit, newTestData)
insurTestDataRMSE = sqrt(mean((insurPred - newTestData$newpol)^2))
insurTestDataRMSE
insurTrainData = read.csv("insurTrain.csv")
insurTestData = read.csv("insurTest.csv")
newTrainData = insurTrainData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
newTestData = insurTestData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
# linear regression model of MEDV
fit = lm(newpol ~ ., data=newTrainData)
summary(fit)
# Find the RMSE
insurTrainDataRMSE = sqrt(mean(fit$residuals^2))
insurTrainDataRMSE
# Predict on the test set and compute error
insurPred = predict(fit, newTestData)
insurTestDataRMSE = sqrt(mean((insurPred - newTestData$newpol)^2))
insurTestDataRMSE
newTestData$newpol
View(insurTestData)
insurPred
insurPred = predict(fit, newTestData)
insurTestDataRMSE = sqrt(mean((insurPred - newTestData$newpol)^2))
insurTestDataRMSE
# compare
percentDiff = (insurTestDataRMSE - insurTrainDataRMSE)/insurTrainDataRMSE
percentDiff
insurTrainNEWPOL = as.matrix(insurTrainData[, 1])
insurTrainOther = as.matrix(insurTrainData[, -1])
insurTestNEWPOL = as.matrix(insurTestData[, 1])
insurTestOther = as.matrix(insurTestData[, -1])
# ridge fit
insurTrainRidgeFit = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=0, lambda=seq(0, 3, .1))
insurTrainRidgeFit
plot(insurTrainRidgeFit, xvar="lambda")
summary(insurTrainRidgeFit)
insurTrainRidgeFit2 = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=0, nfolds=7)
plot(insurTrainRidgeFit2)
ridgePred = predict(insurTrainRidgeFit2, insurTestOther, s="lambda.1se")
rmseRidge = sqrt(mean((ridgePred - insurTestNEWPOL)^2))
rmseRidge
percentDiff2 = (insurTestDataRMSE - rmseRidge)/rmseRidge
percentDiff2
insurTrainLassoFit = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=1, lambda=seq(0, 1, .1))
insurTrainLassoFit
plot(insurTrainLassoFit, xvar="lambda")
insurTrainLassoFit2 = cv.glmnet(insurTrainOther, insurTrainNEWPOL)
plot(insurTrainLassoFit2)
coef(insurTrainLassoFit2, s="lambda.1se")
lassoPred = predict(insurTrainLassoFit2, newx=insurTestOther, s="lambda.1se")
rmseLasso = sqrt(mean((lassoPred - insurTestNEWPOL)^2))
rmseLasso
percentDiff3 = (insurTestDataRMSE - rmseLasso)/rmseLasso
percentDiff3
rmseLasso
rmseLasso = sqrt(mean((lassoPred - insurTestNEWPOL)^2))
coef(insurTrainLassoFit2, s="lambda.1se")
insurTrainLassoFit2 = cv.glmnet(insurTrainOther, insurTrainNEWPOL)
View(insurTrainOther)
View(insurTrainNEWPOL)
View(insurTrainOther)
# lasso fit
insurTrainLassoFit = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=1, lambda=seq(0, 1, .1))
insurTrainLassoFit
plot(insurTrainLassoFit, xvar="lambda")
fit = lm(newpol ~ ., data=newTrainData)
summary(fit)
# Find the RMSE
insurTrainDataRMSE = sqrt(mean(fit$residuals^2))
insurTrainDataRMSE
# Predict on the test set and compute error
insurPred = predict(fit, newTestData)
insurTestDataRMSE = sqrt(mean((insurPred - newTestData$newpol)^2))
insurTestDataRMSE
# ridge fit
insurTrainRidgeFit = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=0, lambda=seq(0, 3, .1))
insurTrainRidgeFit
rmseRidge
insurTrainLassoFit2 = cv.glmnet(insurTrainOther, insurTrainNEWPOL)
plot(insurTrainLassoFit2)
coef(insurTrainLassoFit2, s="lambda.1se")
lassoPred = predict(insurTrainLassoFit2, newx=insurTestOther, s="lambda.1se")
rmseLasso = sqrt(mean((lassoPred - insurTestNEWPOL)^2))
rmseLasso
fitElastic = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.5, lambda=seq(0, 5, .1))
plot(fitElastic, xvar="lambda")
fitElastic
fitElastic = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.5, nfolds=7)
fitElastic = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.5, nfolds=7)
elasticPred = predict(fitElastic, insurTestOther, s="lambda.1se")
rmseElastic = sqrt(mean((elasticPred - yTest)^2))
rmseElastic
elasticPred = predict(fitElastic, insurTestOther, s="lambda.1se")
rmseElastic = sqrt(mean((elasticPred - insurTestNEWPOL)^2))
rmseElastic
fitElastic = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.25, nfolds=7)
elasticPred = predict(fitElastic, insurTestOther, s="lambda.1se")
rmseElastic = sqrt(mean((elasticPred - insurTestNEWPOL)^2))
rmseElastic
# alpha = 0.25
fitElastic25 = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.25, nfolds=7)
elasticPred25 = predict(fitElastic25, insurTestOther, s="lambda.1se")
rmseElastic25 = sqrt(mean((elasticPred25 - insurTestNEWPOL)^2))
rmseElastic25
# alpha = 0.5
fitElastic = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.5, nfolds=7)
elasticPred = predict(fitElastic, insurTestOther, s="lambda.1se")
rmseElastic = sqrt(mean((elasticPred - insurTestNEWPOL)^2))
rmseElastic
# alpha = 0.75
fitElastic75 = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.75, nfolds=7)
elasticPred75 = predict(fitElastic75, insurTestOther, s="lambda.1se")
rmseElastic75 = sqrt(mean((elasticPred75 - insurTestNEWPOL)^2))
rmseElastic75
plot(insurTrainRidgeFit, xvar="lambda")
insurTrainData = read.csv("insurTrain.csv")
insurTestData = read.csv("insurTest.csv")
newTrainData = insurTrainData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
newTestData = insurTestData[,c("newpol", "pctmin", "fires", "thefts", "pctold", "income")]
# linear regression model of NEWPOL
fit = lm(newpol ~ ., data=newTrainData)
summary(fit)
# Find the RMSE
insurTrainDataRMSE = sqrt(mean(fit$residuals^2))
insurTrainDataRMSE
# Predict on the test set and compute error
insurPred = predict(fit, newTestData)
insurTestDataRMSE = sqrt(mean((insurPred - newTestData$newpol)^2))
insurTestDataRMSE
# compare
percentDiff = (insurTestDataRMSE - insurTrainDataRMSE)/insurTrainDataRMSE
percentDiff
library(glmnet)
# prepare
insurTrainNEWPOL = as.matrix(insurTrainData[, 1])
insurTrainOther = as.matrix(insurTrainData[, -1])
insurTestNEWPOL = as.matrix(insurTestData[, 1])
insurTestOther = as.matrix(insurTestData[, -1])
# ridge fit
insurTrainRidgeFit = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=0, lambda=seq(0, 3, .1))
insurTrainRidgeFit
plot(insurTrainRidgeFit, xvar="lambda")
summary(insurTrainRidgeFit)
insurTrainRidgeFit2 = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=0, nfolds=7)
plot(insurTrainRidgeFit2)
insurTrainRidgeFit2
insurTrainNEWPOL
insurTrainRidgeFit = glmnet(xTrain, yTrain, alpha=0, lambda=seq(0, 3, .1))
insurTrainRidgeFit
plot(insurTrainRidgeFit, xvar="lambda")
summary(insurTrainRidgeFit)
insurTrainRidgeFit2 = cv.glmnet(xTrain, yTrain, alpha=0, nfolds=7)
yTrain = as.matrix(insurTrainData[, 1])
xTrain = as.matrix(insurTrainData[, -1])
yTest = as.matrix(insurTestData[, 1])
xTest = as.matrix(insurTestData[, -1])
insurTrainRidgeFit = glmnet(xTrain, yTrain, alpha=0, lambda=seq(0, 3, .1))
insurTrainRidgeFit
plot(insurTrainRidgeFit, xvar="lambda")
summary(insurTrainRidgeFit)
insurTrainRidgeFit2 = cv.glmnet(xTrain, yTrain, alpha=0, nfolds=7)
plot(insurTrainRidgeFit2)
insurTrainRidgeFit2
insurTrainRidgeFit2 = cv.glmnet(xTrain, yTrain, alpha=0, nfolds=7)
plot(insurTrainRidgeFit2)
ridgePred = predict(insurTrainRidgeFit2, xTest, s="lambda.1se")
rmseRidge = sqrt(mean((ridgePred - yTest)^2))
rmseRidge
library(glmnet)
# prepare
insurTrainNEWPOL = as.matrix(insurTrainData[, 1])
insurTrainOther = as.matrix(insurTrainData[, -1])
insurTestNEWPOL = as.matrix(insurTestData[, 1])
insurTestOther = as.matrix(insurTestData[, -1])
# ridge fit
insurTrainRidgeFit = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=0, lambda=seq(0, 3, .1))
insurTrainRidgeFit
plot(insurTrainRidgeFit, xvar="lambda")
summary(insurTrainRidgeFit)
insurTrainRidgeFit2 = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=0, nfolds=7)
plot(insurTrainRidgeFit2)
ridgePred = predict(insurTrainRidgeFit2, insurTestOther, s="lambda.1se")
rmseRidge = sqrt(mean((ridgePred - insurTestNEWPOL)^2))
rmseRidge
# lasso fit
insurTrainLassoFit = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=1, lambda=seq(0, 1, .1))
insurTrainLassoFit
plot(insurTrainLassoFit, xvar="lambda")
insurTrainLassoFit2 = cv.glmnet(insurTrainOther, insurTrainNEWPOL)
plot(insurTrainLassoFit2)
coef(insurTrainLassoFit2, s="lambda.1se")
lassoPred = predict(insurTrainLassoFit2, newx=insurTestOther, s="lambda.1se")
rmseLasso = sqrt(mean((lassoPred - insurTestNEWPOL)^2))
rmseLasso
# elastic net regression
fitElastic = glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.5, lambda=seq(0, 5, .1))
plot(fitElastic, xvar="lambda")
fitElastic
# alpha = 0.25
fitElastic25 = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.25, nfolds=7)
elasticPred25 = predict(fitElastic25, insurTestOther, s="lambda.1se")
rmseElastic25 = sqrt(mean((elasticPred25 - insurTestNEWPOL)^2))
rmseElastic25
# alpha = 0.5
fitElastic = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.5, nfolds=7)
elasticPred = predict(fitElastic, insurTestOther, s="lambda.1se")
rmseElastic = sqrt(mean((elasticPred - insurTestNEWPOL)^2))
rmseElastic
# alpha = 0.75
fitElastic75 = cv.glmnet(insurTrainOther, insurTrainNEWPOL, alpha=.75, nfolds=7)
elasticPred75 = predict(fitElastic75, insurTestOther, s="lambda.1se")
rmseElastic75 = sqrt(mean((elasticPred75 - insurTestNEWPOL)^2))
rmseElastic75
