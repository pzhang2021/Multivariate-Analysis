library(car)
library(corrplot)
library(ggplot2)
data = read.csv("Census2.csv")
View(data)
p = prcomp(d)
print(p)      # Note the "rotation" that is the eigenvectors <.41, .91>
summary(p)    # The first component contains 98.7% of the variance!
p = prcomp(data)
print(p)      # Note the "rotation" that is the eigenvectors <.41, .91>
summary(p)    # The first component contains 98.7% of the variance!
library(car)
library(corrplot)
library(ggplot2)
source("PCA_Plot.R")  # Has a nice PCA visualization function
#############################################################################################
# First Example
#
# This is the example from the lecture where we rotate a simple
# correlated set of two variables
#############################################################################################
d = read.csv("FirstDataset.csv")
round(cov(d), 2)   # Lots of covariance
round(cor(d), 2)   # Highly correlated
# Get an initial plot
plot(d, pch=16, col="red", xlim=c(-6, 6), ylim=c(-6, 6))
# compute the eigenvectors and eigenvalues
eigen(cov(d))
# Transform the variables by the rotation we "know" and plot.
z1 = .4*d$x1 + .9*d$x2
z2 = -.9*d$x1 + .4*d$x2
dTrans = data.frame(z1, z2)
plot(dTrans, pch=16, col="red", xlim=c(-6, 6), ylim=c(-6, 6))
# Compute the correlation ... note: MUCH less than before!
cor(dTrans)
# Now, compute the principal components and investigate
p = prcomp(d)
print(p)      # Note the "rotation" that is the eigenvectors <.41, .91>
summary(p)    # The first component contains 98.7% of the variance!
library(car)
library(corrplot)
library(ggplot2)
data = read.csv("Census2.csv")
p = prcomp(data)
print(p)      # Note the "rotation" that is the eigenvectors <.41, .91>
summary(p)    # The first component contains 98.7% of the variance!
library(car)
library(corrplot)
library(ggplot2)
data = read.csv("Census2.csv")
p = prcomp(data)
View(p)
print(p)
summary(p)
plot(data)
View(p)
plot(p)
data = read.csv("Census2.csv")
c = cor(data)
print(round(c, 2))
corrplot(c)
p = prcomp(data)
summary(p)
View(c)
View(data)
print(p)
print(p$rotation)
newData = data %>% mutate(MedianHomeVal = MedianHomeVal/100000)
p2 = prcomp(newData)
summary(p2)
# (b)
newData = data %>% mutate(MedianHomeVal = MedianHomeVal/100000)
newData = data.mutate(MedianHomeVal = MedianHomeVal/100000)
# (b)
newData = mutate(MedianHomeVal = MedianHomeVal/100000)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# (b)
newData = mutate(MedianHomeVal = MedianHomeVal/100000)
# (b)
newData = data.mutate(MedianHomeVal = MedianHomeVal/100000)
# (b)
newData = data %>% mutate(MedianHomeVal = MedianHomeVal/100000)
View(newData)
p2 = prcomp(newData)
summary(p2)
print(p2$rotation)
View(data)
View(newData)
View(newData)
# (c)
head(newData)
# (d)
c = cor(newData)
plot(c)
c
p3 = prcomp(c)
summary(p3)
p3 = prcomp(newData, scale. = TRUE)
summary(p3)
plot(p3)
biplot(p3)
biplot(p2)
# (e)
round(cov(newData), 2)
corrTest = corr.test(newData, adjust="none")
x = corrTest$p
xTest = ifelse(x<0.05, T, F)
library(psych)
corrTest = corr.test(newData, adjust="none")
x = corrTest$p
xTest = ifelse(x<0.05, T, F)
xTest
colSums(xTest) - 1
emp = read.table("Employment.txt", header=T)
emp = read.table("Employment.txt")
emp = read.table("Employment.txt", header=F)
emp = read.table("Employment.txt", header=TRUE)
emp = read.table("Employment.txt", header=FALSE)
emp = read.table("Employment.txt", header=FALSE)
planets = read.table("Employment.txt", header=T)
planets = read.table("Employment.txt", header=T)
planets = read.table("Employment.txt", fill = T, header=T)
View(planets)
planets = read.table("Employment.txt", header=T)
View(planets)
data = read.table("Employment.txt", header=T)
View(planets)
View(data)
# (a)
head(data)
# (b)
p = prcomp(data)
summary(p)
plot(p)
p = prcomp(data)
summary(p)
plot(p)
p = prcomp(data)
summary(p)
plot(p)
# (b)
p = prcomp(data)
View(data)
data[,2:3]
# (b)
p = prcomp(data[,2:10])
summary(p)
plot(p)
# (b)
p = prcomp(data[,2:10], scale. = TRUE)
summary(p)
plot(p)
screeplot(p)
abline(h=1, col="red", lty= 3)
screeplot(p)
screeplot(p, type="line")
abline(h=1, col="red", lty= 3)
screeplot(p)
abline(h=1, col="red", lty= 3)
abline(h=1, col="red", lty= 2)
plot(p)
abline(h=1, col="red", lty= 2)
# (b)
p = prcomp(data[,2:10], scale. = TRUE)
summary(p)
plot(p)
abline(h=1, col="red", lty= 2)
abline(h=1, col="red", lty= 1)
# (c)
# (d)
p$rotation
# (c)
# (d)
p$rotation$PC1
View(p)
p[["rotation"]]
p[["rotation"]][PC1]
p[["rotation"]["PC1"]]
p[["rotation"]]["PC1"]
# (c)
# (d)
p$rotation
p = prcomp(data[,2:10])
summary(p)
plot(p)
data = read.csv("wiscsem.csv")
View(data)
p = prcomp(data)
summary(p)
plot(p)
p = prcomp(data, scale. = TRUE)
summary(p)
plot(p)
abline(h=1, col="red", lty= 1)
# (c)
pfa = principal(data, nfactors = 3, rot = "varimax")
library(dplyr)
library(car)
library(corrplot)
library(ggplot2)
library(psych)
# (c)
pfa = principal(data, nfactors = 3, rot = "varimax")
print(pfa$loadings, cutoff = 0.4)
PCA_Plot_Psych(pfa)
PCA_Plot_Psyc(pfa)
PCA_Plot_Psyc(pfa)
PCA_Plot_Psyc(pfa)
PCA_Plot_Psyc = function(pcaData)
{
library(ggplot2)
theta = seq(0,2*pi,length.out = 100)
circle = data.frame(x = cos(theta), y = sin(theta))
p = ggplot(circle,aes(x,y)) + geom_path()
loadings = as.data.frame(unclass(pcaData$loadings))
s = rep(0, ncol(loadings))
for (i in 1:ncol(loadings))
{
s[i] = 0
for (j in 1:nrow(loadings))
s[i] = s[i] + loadings[j, i]^2
s[i] = sqrt(s[i])
}
for (i in 1:ncol(loadings))
loadings[, i] = loadings[, i] / s[i]
loadings$.names = row.names(loadings)
p + geom_text(data=loadings, mapping=aes(x = RC1, y = RC2, label = .names, colour = .names, fontface="bold")) +
coord_fixed(ratio=1) + labs(x = "PC1", y = "PC2")
}
PCA_Plot_Psyc(pfa)
# (d)
print(pfa$loadings, cutoff=.4, sort=T)
fact = factanal(data, 3)
print(fact$loadings, cutoff=.4, sort=T)
